upstream registry {
  server 127.0.0.1:1020 max_fails=3 fail_timeout=5s;
  server 127.0.0.1:1021 max_fails=3 fail_timeout=5s backup;
}

server {
   listen              80;
   listen              443 spdy ssl;
   ssl_certificate     {{ ssl_bundle_crt }};
   ssl_certificate_key {{ ssl_crt_key }};
   server_name         {{ server_name }};

   # Add SSL cipher settings
   ssl_prefer_server_ciphers on;
   ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4";
   ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
   ssl_session_cache    builtin:1000  shared:SSL:10m;
   ssl_session_timeout  10m;
   keepalive_timeout    70;

  client_max_body_size  4G;
  access_log /var/log/nginx/{{ server_name }}.access.log;
  error_log  /var/log/nginx/{{ server_name }}.error.log;


  set $thttps $https;
  set $tscheme $scheme;
  if ($http_x_forwarded_proto = https) {
    set $thttps on;
    set $tscheme "https";
  }
  if ($http_x_forwarded_proto = HTTPS) {
    set $thttps on;
    set $tscheme "https";
  }

  # force redirect of non-HTTPS pages to HTTPS
  set $redirect off;
  if ($thttps != "on") {
    set $redirect on;
  }
  if ($redirect = on) {
    return 301 https://$host$request_uri;
  }

  location / {

    proxy_pass          http://registry;
    proxy_set_header    Host $host;
    proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_set_header    X-Forwarded-Proto $tscheme;
    proxy_http_version  1.1;
  }

}
